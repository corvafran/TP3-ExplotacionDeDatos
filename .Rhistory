add_trace(x = Proteinas$Pais, y = Proteinas$`Frutas yVegetales`, type = 'scatter', mode = 'markers', name = 'Frutas y Vegetales') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Pescado, type = 'scatter', mode = 'markers', name = 'Pescado')
gDispersion
gDispersion
##Dibujo el diagrama de dispersion
gDispersion <- plot_ly(Proteinas, x = Proteinas$Pais, y = Proteinas$CarneVacuna, type = 'scatter',mode = 'markers', name = 'Carne Vacuna') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Huevos, type = 'scatter', mode = 'markers', name = 'Huevos') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Cereal, type = 'scatter', mode = 'markers', name = 'Cereal') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Leche, type = 'scatter', mode = 'markers', name = 'Leche') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Embutidos, type = 'scatter', mode = 'markers', name = 'Embutidos') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$CarneCerdo, type = 'scatter', mode = 'markers',name = 'Carne Cerdo') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$FrutosSecos, type = 'scatter', mode = 'markers', name = 'Frutos Secos') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$`Frutas yVegetales`, type = 'scatter', mode = 'markers', name = 'Frutas y Vegetales') %>%
add_trace(x = Proteinas$Pais, y = Proteinas$Pescado, type = 'scatter', mode = 'markers', name = 'Pescado')
##Dibujo el diagrama de dispersion
gDispersion <- plot_ly(Proteinas_with_countries, x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$CarneVacuna, type = 'scatter',mode = 'markers', name = 'Carne Vacuna') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Huevos, type = 'scatter', mode = 'markers', name = 'Huevos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Cereal, type = 'scatter', mode = 'markers', name = 'Cereal') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Leche, type = 'scatter', mode = 'markers', name = 'Leche') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Embutidos, type = 'scatter', mode = 'markers', name = 'Embutidos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$CarneCerdo, type = 'scatter', mode = 'markers',name = 'Carne Cerdo') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$FrutosSecos, type = 'scatter', mode = 'markers', name = 'Frutos Secos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$`Frutas yVegetales`, type = 'scatter', mode = 'markers', name = 'Frutas y Vegetales') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Pescado, type = 'scatter', mode = 'markers', name = 'Pescado')
gDispersion
library(readxl)
library(readr)
library(ggplot2)
library(plotly)
library(readxl)
url <- "https://docs.google.com/spreadsheets/d/1zlkql6_le5xnaJkNFMv5JB2STKj9-C5V/export?format=xls&id=1zlkql6_le5xnaJkNFMv5JB2STKj9-C5V"
destfile <- "Proteinas.xls"
curl::curl_download(url, destfile)
Proteinas_with_countries <- read_excel(destfile, col_types = c("text",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric"))
View(Proteinas_with_countries)
Proteinas <- read.csv(url("https://sites.google.com/site/explotaciondedatos/07-ejemplos-con-codigo/Proteinas.txt?attredirects=0&d=1"), encoding="UTF-8", row.names=1, sep=";", colClasses=c("character", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
##Saco las componentes principales.
Proteinas_pca <- prcomp(Proteinas)
Proteinas_pca
##Saco coorelaciones entre paises, ejemplo puedo ver cuales son los paises mas cerealeros como Rumania, Yugoslabia y Rumania.
biplot(Proteinas_pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
##Saco datos resumen de los boxplot
summary(Proteinas)
## Dibujo diagramas de cajas
library(plotly)
Proteinas_boxplot <- plot_ly(data.frame(Proteinas_with_countries), x = Proteinas_with_countries$CarneVacuna, color = "red", type = "box",name="Carne vacuna") %>%
add_trace( x = Proteinas_with_countries$Huevos, color = "blue", type = "box",name="Huevos")%>%
add_trace( x = Proteinas_with_countries$CarneCerdo, color = "green", type = "box",name="Cerdo")%>%
add_trace( x = Proteinas_with_countries$Leche, color = "brown", type = "box",name="Leche")%>%
add_trace( x = Proteinas_with_countries$Cereal, color = "yellow", type = "box",name="Cereales")%>%
add_trace( x = Proteinas_with_countries$Embutidos, color = "pink", type = "box",name="Embutidos")%>%
add_trace( x = Proteinas_with_countries$FrutosSecos, color = "orange", type = "box",name="FrutosSecos")%>%
add_trace( x = Proteinas_with_countries$`Frutas yVegetales`, color = "grey", type = "box",name="Frutas y vegetales")%>%
add_trace( x = Proteinas_with_countries$Pescado, color = "back", type = "box",name="Pescado")
Proteinas_boxplot
##Saco grafico de sedimentacion
plot(Proteinas_pca, type = "lines")
##Grafico de varianza acumulada
##El estudio de la varianza explicada acumulada muestra que con solo tres componentes se puede capturar el 86% de la varianza, que es la mayoria de la información contenida en la expresión de las 9 proteinas
library(ggplot2)
prop_varianza <- Proteinas_pca$sdev^2/sum(Proteinas_pca$sdev^2)
prop_varianza_acum <- cumsum(prop_varianza)
prop_varianza <- Proteinas_pca$sdev^2/sum(Proteinas_pca$sdev^2)
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = factor(1:9)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_label(aes(label = round(prop_varianza_acum,2))) +
theme_bw() +
labs(x = "Componentes principales",
y = "Prop. varianza explicada acumulada")
##Dibujo el diagrama de dispersion
gDispersion <- plot_ly(Proteinas_with_countries, x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$CarneVacuna, type = 'scatter',mode = 'markers', name = 'Carne Vacuna') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Huevos, type = 'scatter', mode = 'markers', name = 'Huevos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Cereal, type = 'scatter', mode = 'markers', name = 'Cereal') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Leche, type = 'scatter', mode = 'markers', name = 'Leche') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Embutidos, type = 'scatter', mode = 'markers', name = 'Embutidos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$CarneCerdo, type = 'scatter', mode = 'markers',name = 'Carne Cerdo') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$FrutosSecos, type = 'scatter', mode = 'markers', name = 'Frutos Secos') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$`Frutas yVegetales`, type = 'scatter', mode = 'markers', name = 'Frutas y Vegetales') %>%
add_trace(x = Proteinas_with_countries$Pais, y = Proteinas_with_countries$Pescado, type = 'scatter', mode = 'markers', name = 'Pescado')
gDispersion
##Saco las componentes principales.
Proteinas_pca <- prcomp(Proteinas, center = TRUE, scale = TRUE)
##Saco grafico de sedimentacion
plot(Proteinas_pca, type = "lines")
prop_varianza <- Proteinas_pca$sdev^2/sum(Proteinas_pca$sdev^2)
prop_varianza_acum <- cumsum(prop_varianza)
prop_varianza <- Proteinas_pca$sdev^2/sum(Proteinas_pca$sdev^2)
prop_varianza_acum <- cumsum(prop_varianza)
ggplot(data = data.frame(prop_varianza_acum, pc = factor(1:9)),
aes(x = pc, y = prop_varianza_acum, group = 1)) +
geom_point() +
geom_line() +
geom_label(aes(label = round(prop_varianza_acum,2))) +
theme_bw() +
labs(x = "Componentes principales",
y = "Prop. varianza explicada acumulada")
library(readr)
##Importo los datos de los partos en los hospitales de GBA
partos_cesareas <- read_delim("https://catalogo.datos.gba.gob.ar/dataset/0b6323b4-5165-4839-926f-c61440b5aea3/resource/f7c637a9-9b9d-4278-b375-685b7e734305/download/partos-cesareas.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(partos_cesareas)
modelo_simple <- lm(data = partos_cesareas,formula = partos ~ cesárea)
names(modelo_simple)
summary(modelo_simple)
modelo_simple <- lm(data = partos_cesareas,formula = partos ~ cesarea)
summary(modelo_simple)
anova(modelo_simple)
clean
clear
install.packages("ISLR")
anova(modelo_simple)
abline(modelo_simple)
modelo_simple <- lm(data = partos_cesareas,formula = cesárea ~ partos)
names(modelo_simple)
summary(modelo_simple)
anova(modelo_simple)
##Coeficiente de determinacion, mide la variabilidad explicada sobre Y sobre X
anova(modelo_simple)
##Mide la bondad del ajuste
plot(partos_cesareas$partos, partos_cesareas$cesárea)
##Mide la bondad del ajuste
plot(partos_cesareas$partos, partos_cesareas$cesárea, xlab = "Partos", ylab = "Cesárea")
plot(modelo_simple)
##Mide la bondad del ajuste
plot(partos_cesareas$partos, partos_cesareas$cesárea, xlab = "Partos", ylab = "Cesárea")
plot(modelo_simple)
## Multiple R-squared Mide la bondad del modelo
summary(regresion)
## El comando básico es lm (linear models).
## El primer argumento de este comando es una fórmula y ~ x
regresion <- lm(data = partos_cesareas,formula = cesárea ~ partos)
## Multiple R-squared Mide la bondad del modelo
summary(regresion)
library(readr)
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
view(df_alumnos)
View(df_alumnos)
## Verificamos la existencia de datos nulos.
valoresNa<-which(is.na(df_alumnos))
length(valoresNa)
View(valoresNa)
## Verificamos la existencia de datos nulos.
valoresNa<-which(is.empty.model(df_alumnos))
## Verificamos la existencia de datos nulos.
valoresNa<-which(is.empty(df_alumnos))
library(GGally)
install.packages("GGally")
library(GGally)
library(ggplot2)
library(GGally)
## Vericamos coolinealidad
ggpairs(df_alumnos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"),
axisLabels = "none")
library(fastDummies)
install.packages("fastDummies")
library(fastDummies)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
select(=c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
select(= c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
##Convertimos las variables categoricas a dummies
dummy_cols(perros,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob")) %>%
select(-c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
library(fastDummies)
##Convertimos las variables categoricas a dummies
dummy_cols(perros,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob")) %>%
select(-c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob")) %>%
select(-c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
View(df_alumnos)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob")) %>%
select(-c("sex", "address", "famsize", "Pstatus", "Mjob", "Fjob"))
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("magrittr")
library(magrittr) # needs to be run every time you start R and want to use %>%
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
View(df_alumnos)
View(df_alumnos)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
library(fastDummies)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
install.packages("dplyr")    # alternative installation of the %>%
library(dplyr)    # alternatively, this also loads %>%
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)    # alternatively, this also loads %>%
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
View(df_alumnos)
View(df_alumnos)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex")) %>%
select(-c("sex"))
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex"))
library(fastDummies)
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex"))
View(df_alumnos)
select(-c("sex"))
select("sex")
##Convertimos las variables categoricas a dummies
dummy_cols(df_alumnos,  select_columns = c("sex"))
##Convertimos las variables categoricas a dummies
View(dummy_cols(df_alumnos,  select_columns = c("sex", "Pstatus")))
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(ggplot2)
library(GGally)
library(fastDummies)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
##Convertimos las variables categoricas a dummies
dummyCols <- c("sex", "Pstatus")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
select(df_alumnos, -dummyCols)
View(df_alumnos)
select(df_alumnos, -dummyCols)
View(df_alumnos)
df_alumnos <- select(df_alumnos, -dummyCols)
View(df_alumnos)
View(df_alumnos)
View(df_alumnos)
##Convertimos las variables categoricas a dummies
dummyCols <- c("sex", "Pstatus", "adress", "famSize", "Mjob", "Fjob","reason",
"guardian", "schoolsup","famsup", "paid",
"activities", "nursery", "higher", "internet", "romantic", "freetime")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
##Convertimos las variables categoricas a dummies
dummyCols <- c("sex", "Pstatus", "adress", "famSize", "Mjob", "Fjob","reason",
"guardian", "schoolsup","famsup", "paid",
"activities", "nursery", "higher", "internet", "romantic", "freetime")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
##Convertimos las variables categoricas a dummies
dummyCols <- c("sex", "Pstatus", "adress", "famSize", "Mjob", "Fjob","reason",
"guardian", "schoolsup","famsup", "paid",
"activities", "nursery", "higher", "internet", "romantic", "freetime")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
##Convertimos las variables categoricas a dummies
dummyCols <- c("sex", "Pstatus", "adress", "famSize", "Mjob", "Fjob","reason",
"guardian", "schoolsup","famsup", "paid",
"activities", "nursery", "higher", "internet", "romantic", "freetime")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
View(df_alumnos)
##Convertimos las variables categoricas a dummies
colnames(df_alumnos)
## Importo datos
df_alumnos <- read_delim("https://doc-0o-ac-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/i2027oqeur1hikspvce9vka503b7umge/1569369600000/12156006334743028626/*/12ts1iY-OBkXTnLFjAPLDVcDHQU8k0bA5?e=download",
";", escape_double = FALSE, trim_ws = TRUE)
View(df_alumnos)
##Convertimos las variables categoricas a dummies
colnames(df_alumnos)
dummyCols <- c("sex", "Pstatus", "address",
"famsize", "Mjob", "Fjob","reason",
"guardian", "schoolsup","famsup", "paid",
"activities", "nursery", "higher",
"internet", "romantic", "freetime")
df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
df_alumnos <- select(df_alumnos, -dummyCols)
View(df_alumnos)
df_alumnos <- select(df_alumnos, -c("school"))
View(valoresNa)
View(df_alumnos)
## Vericamos coolinealidad
ggpairs(df_alumnos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"),
axisLabels = "none")
## Importo datos
df_alumnos <- read_delim("student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
##Test de correlación
pairs(df_alumnos)
##Seteo mi working directory
setwd("~/Documents/UNO Facultad/Explotacion de datos/TP3-ExplotacionDeDatos")
## Importo datos
df_alumnos <- read_delim("student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(ggplot2)
library(GGally)
library(fastDummies)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
## Importo datos
df_alumnos <- read_delim("student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
##Test de correlación
pairs(df_alumnos)
##Elimino la variable escuela yaque es un dato irrelevante para el analisis
df_alumnos <- select(df_alumnos, -c("school"))
##Test de correlación
pairs(df_alumnos)
datos <- data.frame(peso = c(800, 950, 1050, 350, 750, 600, 1075, 250, 700,
650, 975, 350, 950, 425, 725),
volumen = c(885, 1016, 1125, 239, 701, 641, 1228, 412, 953,
929, 1492, 419, 1010, 595, 1034),
tipo_tapas = c("duras", "duras", "duras", "duras", "duras",
"duras", "duras", "blandas", "blandas",
"blandas", "blandas", "blandas", "blandas",
"blandas", "blandas"))
pairs(datos)
##
## Vericamos coolinealidad. Funciona? lo probe y no funco capaz hay que cambiar cosas o hacer otra cosa
ggpairs(df_alumnos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"),
axisLabels = "none")
View(tipo_tapas)
pairs(datos)
##Funcion summary
summary(df_alumnos)
##Funcion summary
summary(df_alumnos)
glimpse(df_alumnos)
##Test de correlación
pairs(df_alumnos[,-c(1,7)])
pairs(df_alumnos[,-c(1,7)])
##Test de correlación
pairs(df_alumnos[,-c(1,2)])
##Test de correlación
pairs(df_alumnos[,-c(6,7)])
View(df_alumnos)
View(datos)
View(data)
View(data)
View(datos)
View(df_alumnos)
View(gDispersion)
View(gDispersion)
## Importo datos
df_alumnos <- read_delim("student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(df_alumnos)
##Elimino la variable escuela yaque es un dato irrelevante para el analisis
df_alumnos <- select(df_alumnos, -c("school"))
datos <- data.frame(peso = c(800, 950, 1050, 350, 750, 600, 1075, 250, 700,
650, 975, 350, 950, 425, 725),
volumen = c(885, 1016, 1125, 239, 701, 641, 1228, 412, 953,
929, 1492, 419, 1010, 595, 1034),
tipo_tapas = c("duras", "duras", "duras", "duras", "duras",
"duras", "duras", "blandas", "blandas",
"blandas", "blandas", "blandas", "blandas",
"blandas", "blandas"))
View(tipo_tapas)
pairs(datos)
##Test de correlación
pairs(df_alumnos[,-c(6,7)])
## Filtrar casos no deseados
# Analizar los datos ingresados
my_data_status=df_status(heart_disease, print_results = F)
## Filtrar casos no deseados
# Analizar los datos ingresados
my_data_status=df_status(df_alumnos, print_results = F)
library(ggplot2)
library(funModeling)
install.packages("funModeling")
library(funModeling)
library(funModeling)
# Quitar las variables que tienen un 60% de valores cero
vars_to_remove=filter(my_data_status, p_zeros > 60)  %>% .$variable
vars_to_remove=filter(my_data_status, p_zeros > 60)  %>% .$variable
## Filtrar casos no deseados
# Analizar los datos ingresados
my_data_status=df_status(df_alumnos, print_results = F)
# Quitar las variables que tienen un 60% de valores cero
vars_to_remove=filter(my_data_status, p_zeros > 60)  %>% .$variable
vars_to_remove
df_alumnos = select(df_alumnos, -one_of(vars_to_remove))
vars_to_remove
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
describe(df_alumnos)
clean
clear
describe(df_alumnos)
##Test de correlación
pairs(df_alumnos[,-c(6,7)])
##Fuciono el promedio de los tres trimestres
df_alumnos$promedioTrimestres<-(df_alumnos$G1 + df_alumnos$G2 + df_alumnos$G3)/3
View(df_alumnos)
##Elimino los trimestres de la tabla
df_alumnos <- select(df_alumnos, -c("G1", "G2", "G3"))
View(df_alumnos)
col_number(df_alumnos)
ncol(df_alumnos)
View(df_alumnos[(df_alumnos[,promedioTrimestres]!=0),])
View(df_alumnos)
df_alumnos$promedioTrimestres
View(df_alumnos[(df_alumnos[,promedioTrimestres]!=0),])
View(df_alumnos[(df_alumnos[,df_alumnos$promedioTrimestres]!=0),])
View(df_alumnos[(df_alumnos[,df_alumnos$promedioTrimestres]!=0.0),])
##describe nos permite analizar rápidamente un conjunto
##de datos completo para variables númericas y categóricas
##y vemos que no tenemos mas valores missing(cantidad de valores faltantes)
describe(df_alumnos)
## Ordenar datos según el porcentaje de ceros
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
## Filtrar casos no deseados
# Analizar los datos ingresados
my_data_status=df_status(df_alumnos, print_results = F)
## Ordenar datos según el porcentaje de ceros
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
pairs(datos)
##Funcion summary
summary(df_alumnos)
##Test de correlación
pairs(df_alumnos)
##
ggpairs(df_alumnos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
##df_alumnos <- dummy_cols(df_alumnos,  select_columns = dummyCols)
##df_alumnos <- select(df_alumnos, -dummyCols)
##Elimino la variable escuela yaque es un
##dato irrelevante para el analisis
##como la escuela, el sexo y la edad
##yaque por este analisis no van a ser patrones que nos interese ver
df_alumnos <- select(df_alumnos, -c("school", "sex", "age"))
##Coorelacion entre var
round(cor(x = df_alumnos, method = "pearson"), 3)
colnames(df_alumnos)
## Importo datos
df_alumnos <- read_delim("student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(df_alumnos)
##Coorelacion entre var
round(cor(x = df_alumnos, method = "pearson"), 3)
##Elimino filas G1, G2 y G3 que contengan 0
df_alumnos[!(df_alumnos$G1==0),]
##Elimino filas G1, G2 y G3 que contengan 0
View(df_alumnos[!(df_alumnos$G1==0),])
##Elimino filas G1, G2 y G3 que contengan 0
View(df_alumnos[!(df_alumnos$G2==0),])
##Elimino filas G1, G2 y G3 que contengan 0
View(df_alumnos[!(df_alumnos$G2==0) &!(df_alumnos$G1==0) & !(df_alumnos$G3==0) , ] )
## Ordenar datos según el porcentaje de ceros
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
vars_to_remove
# Quitar las variables que tienen un 60% de valores cero
vars_to_remove=filter(my_data_status, p_zeros > 60)  %>% .$variable
vars_to_remove
##Elimino la variable escuela yaque es un
##dato irrelevante para el analisis
##como la escuela, el sexo y la edad
##yaque por este analisis no van a ser patrones que nos interese ver
df_alumnos <- select(df_alumnos, -c("school", "sex", "age"))
##Fuciono el promedio de los tres trimestres
df_alumnos$promedioTrimestres<- ((df_alumnos$G1
+ df_alumnos$G2
+ df_alumnos$G3) /3)
##Elimino los trimestres de la tabla
df_alumnos <- select(df_alumnos, -c("G1", "G2", "G3"))
df_alumnos$promedioTrimestres
View(df_alumnos[(df_alumnos[,df_alumnospromedioTrimestres]!=0),])
View(df_alumnos)
##describe nos permite analizar rápidamente un conjunto
##de datos completo para variables númericas y categóricas
##y vemos que no tenemos mas valores missing(cantidad de valores faltantes)
describe(df_alumnos)
View(df_alumnos)
View(df_alumnos)
## Vericamos coolinealidad. Funciona? lo probe y no funco capaz hay que cambiar cosas o hacer otra cosa
ggpairs(df_alumnos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"),
axisLabels = "none")
